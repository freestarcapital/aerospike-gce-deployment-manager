#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Aerospike Server definition
#

{% set namePrefix = env['deployment'] %}
{% set network = properties["network"] %}
{% if properties["subnetwork"] %}
{% set subnetwork = properties["subnetwork"] %}
{% endif %}
{% set project = env["project"] %}
{% set zone = properties["zone"] %}
{% set numReplicas = properties["numReplicas"] %}
{% set machineType = properties["machineType"] %}
{% set bootDiskType = properties["bootDiskType"] %}
{% set shadowDiskSuffix = "shadow-data" %}
{% set dataDiskSuffix = "data" %}
{% set numLocalSSDs = properties["numLocalSSDs"] %}
{% set aerospikeVersion = properties["aerospikeVersion"] %}
{% set namespace = properties["namespace"] %}
{% set disks = properties["diskSize"] %}

{% macro hostname(prefix, id) -%}
{{ "%s-%d-vm"|format(prefix, id) }}
{%- endmacro %}

{% macro hostnames() -%}
{% for instance in range(1, properties["numReplicas"] + 1) -%}
  {{ hostname(namePrefix, instance) + '|' }}
{%- endfor %}
{%- endmacro %}

resources:
- type: compute.v1.firewall
  name: {{ '%s-firewall' % namePrefix }}
  properties:
    sourceRanges: [ "0.0.0.0/0" ]
    allowed:
      - IPProtocol: tcp
        ports: [ "3000", "8081" ]
    targetTags:
      - {{ '%s-db' % namePrefix }}
## AMC PASSWORD
- type: password.py
  name: amc-password
  properties:
    length: 10
    includeSymbols: True
## dynamic-price-floor-api user password
- type: password.py
  name: dpfa-password
  properties:
    length: 10
    includeSymbols: True
## data-dispensary-api user password
- type: password.py
  name: dda-password
  properties:
    length: 10
    includeSymbols: True
## klassifikator-api user password
- type: password.py
  name: ka-password
  properties:
    length: 10
    includeSymbols: True
## content-classify-api user password
- type: password.py
  name: cca-password
  properties:
    length: 10
    includeSymbols: True
## rfm-cron user password
- type: password.py
  name: rc-password
  properties:
    length: 10
    includeSymbols: True    

- type: vm_multiple_instances.py
  name: {{ namePrefix }}
  properties:
    zone: {{ zone }}
    machineType: {{ machineType }}
    network: {{ network }}
    {% if subnetwork %}
    subnetwork: {{ subnetwork }}
    {% endif %}
    numberOfVMReplicas: {{ numReplicas }}
    sourceImage: https://www.googleapis.com/compute/v1/projects/aerospike-prod/global/images/aerospike-ee-3-15-0-2-ubuntu16-2017-11-07
    canIpForward: true
    bootDiskType: {{ bootDiskType }}
    localSSDs: {{ numLocalSSDs }}
    {% if properties['useShadowDevice'] %}
    disks:
        {% for n in range(numLocalSSDs) %}
      - deviceName: {{ shadowDiskSuffix + '-' +n|string }}
        type: PERSISTENT
        diskType: pd-ssd
        diskSizeGb: {{ disks }}
        boot: False
        autoDelete: False
        {% endfor %}
    {% elif disks %}
    disks:
      {% if disks is iterable %}
        {% for n in range(disks|count) %}
      - deviceName: {{ dataDiskSuffix + '-' + n|string }}
        type: PERSISTENT
        diskType: pd-ssd
        diskSizeGb: {{ disks[n] }}
        boot: False
        autoDelete: False
        {% endfor %}
      {% else %}
      - deviceName: {{ dataDiskSuffix|string }}
        type: PERSISTENT
        diskType: pd-ssd
        diskSizeGb: {{ disks }}
        boot: False
        autoDelete: False
	  {% endif %}
    {% endif %}
    tags:
      items:
      - {{ namePrefix }}
      - {{ '%s-db' % namePrefix }}

    metadata:
      items:
      - key: startup-script
        value: |
          #!/bin/bash

          ## SETUP THE SSD PARTITIONS
          echo "label: dos"           >> /tmp/sfdisk.txt
          echo "label-id: 0x543c702f" >> /tmp/sfdisk.txt
          echo "device: /dev/sdb"     >> /tmp/sfdisk.txt
          echo "unit: sectors"        >> /tmp/sfdisk.txt
          echo >> /tmp/sfdisk.txt
          echo "/dev/sdb1 : start=         256, size=    26214400, type=83" >> /tmp/sfdisk.txt
          echo "/dev/sdb2 : start=    26214656, size=    68157440, type=5"  >> /tmp/sfdisk.txt
          echo "/dev/sdb5 : start=    26214912, size=    26214400, type=83" >> /tmp/sfdisk.txt
          echo "/dev/sdb6 : start=    52429568, size=    26214400, type=83" >> /tmp/sfdisk.txt
          echo "/dev/sdb7 : start=    78644224, size=     2621440, type=83" >> /tmp/sfdisk.txt
          echo "/dev/sdb8 : start=    81265920, size=     2621440, type=83" >> /tmp/sfdisk.txt
          echo "/dev/sdb9 : start=    83887616, size=    10484480, type=83" >> /tmp/sfdisk.txt
          cat /tmp/sfdisk.txt |  sfdisk /dev/sdb 

          AEROSPIKE_CLUSTER=$(curl -sL -H "Metadata-Flavor: Google"  metadata/computeMetadata/v1beta1/instance/attributes/AEROSPIKE_CLUSTER)
          AEROSPIKE_CONF=/etc/aerospike/aerospike.conf
          #AS_DISKS=$(curl -sL -H "Metadata-Flavor: Google" metadata/computeMetadata/v1beta1/instance/attributes/ATTACHED_DISKS)
          VIRTUAL=$(curl -sL -H "Metadata-Flavor: Google"  metadata/computeMetadata/v1beta1/instance/network-interfaces/0/access-configs/0/external-ip)
          AMC_PASS=$(curl -fs -H "Metadata-Flavor: Google" metadata/computeMetadata/v1/instance/attributes/AMC_PASSWORD)
          IFS='|' read -ra ASD_CLUSTER <<< "$AEROSPIKE_CLUSTER"
          cp /etc/aerospike/sample/aerospike_mesh.conf $AEROSPIKE_CONF
          #CLUSTERING
          sed -i '/.*mesh-seed-address-port/d' $AEROSPIKE_CONF
          for I in "${ASD_CLUSTER[@]}"; do
            IP=$(python -c "import socket; print socket.gethostbyname(\"${I}\")")
            sed -i "/interval/i \\\t\tmesh-seed-address-port $IP 3002" $AEROSPIKE_CONF
          done
          #NAMESPACE
          CODE=$(curl -sL -H "Metadata-Flavor: Google" metadata/computeMetadata/v1beta1/instance/attributes/AEROSPIKE_NS -w "%{http_code}" -o /dev/null)
          if [ "$CODE" != "200" ]; then
            echo "No namespace file found";
          else
            AEROSPIKE_NS=$(curl -sL -H "Metadata-Flavor: Google" metadata/computeMetadata/v1beta1/instance/attributes/AEROSPIKE_NS)
            sed -i '/namespace test/,$d' $AEROSPIKE_CONF
            #IFS=',' read -ra DISKS <<< "$AS_DISKS"
            #for DISK in "${DISKS[@]}"; do
            #  AEROSPIKE_NS=$(echo -e "$AEROSPIKE_NS" | awk -v var=$DISK 'NR==1,/\$DISK/{sub(/\$DISK/,var)} 1')
            #done
            echo -e "$AEROSPIKE_NS" >> $AEROSPIKE_CONF
          fi

          ## AMC
          sed -ie "s/#user = \"<user>\"/user = \"amc\"/" /etc/amc/amc.conf
          sed -ie "s/#password = \"<pass>\"/password = \"${AMC_PASS}\"/" /etc/amc/amc.conf
          /opt/aerospike/balance_scsi_mq
          service aerospike restart
          service amc restart

          ## SETUP USERS .. FIRST TURN ON SECURITY
          cp /etc/aerospike/aerospike.conf /etc/aerospike/aerospike.conf.orig
          sed -ie s/#SEC#// /etc/aerospike/aerospike.conf
          service aerospike restart
          sleep 20
          
          ## CREATE USERS - WOULD BE GOOD TO SET THESE PASSWORDS AS PART OF METADATA SOMEHOW...
          echo "INSTANCE PASS: ${AMC_PASS}" > /tmp/out.txt
          /usr/bin/aql -ved -U admin -Padmin -c "show users" >> /tmp/out.txt 2>&1
          /usr/bin/aql -ved -U admin -Padmin -c "create user dynamic-price-floor-api password ${DYNAMIC-PRICE-FLOOR-API_PASSWORD} role read-write" >> /tmp/out.txt 2>&1 
          /usr/bin/aql -ved -U admin -Padmin -c "create user data-dispensary-api     password ${DATA-DISPENSARY-API_PASSWORD} role read"       >> /tmp/out.txt 2>&1 
          /usr/bin/aql -ved -U admin -Padmin -c "create user klassifikator-api       password ${KLASSIFIKATOR-API_PASSWORD} role read-write" >> /tmp/out.txt 2>&1 
          /usr/bin/aql -ved -U admin -Padmin -c "create user content-classify-api    password ${CONTENT-CLASSIFY-API_PASSWORD} role read-write" >> /tmp/out.txt 2>&1 
          /usr/bin/aql -ved -U admin -Padmin -c "create user rfm-cron                password ${RFM-CRON_PASSWORD} role read-write" >> /tmp/out.txt 2>&1 
          /usr/bin/aql -ved -U admin -Padmin -c "show users" >> /tmp/out.txt 2>&1
          
          ## SET admin USER PASSWORD 
          /usr/bin/aql -ved -U admin -Padmin -c "set password ${AMC_PASS} for admin" >> /tmp/out.txt 2>&1
          service aerospike restart

          ## CLEANUP - ALL PASSWORDS SHOULD BE VISIBLE IN THE GOOGLE CONSOLE .. :)
          mv /tmp/out.txt /etc/aerospike/user_setup.log
  
      {% if namespace %}
      - key: AEROSPIKE_NS
        value: |
          {{ namespace | indent(10) }}
      {% endif %}
      - key: AEROSPIKE_CLUSTER
        value: "{{ hostnames() | trim }}"
      - key: AMC_PASSWORD
        value: "$(ref.amc-password.password)" 
      - key: DYNAMIC-PRICE-FLOOR-API_PASSWORD
        value: "$(ref.dpfa-password.password)"
      - key: DATA-DISPENSARY-API_PASSWORD
        value: "$(ref.dda-password.password)"
      - key: KLASSIFIKATOR-API_PASSWORD
        value: "$(ref.ka-password.password)"
      - key: CONTENT-CLASSIFY-API_PASSWORD
        value: "$(ref.cca-password.password)"
      - key: RFM-CRON_PASSWORD
        value: "$(ref.rc-password.password)"

outputs:
  - name: initialPrimarySelfLink
    value: "$(ref.{{ hostname(namePrefix, 1) }}.selfLink)"
  - name: project
    value:  {{ project }}
  - name: instanceName
    value: {{ hostname(namePrefix, 1) }}
  - name: amcProxyPassword
    value: "$(ref.amc-password.password)"
  - name: primaryIP
    value: "$(ref.{{ namePrefix }}-1-vm.networkInterfaces[0].accessConfigs[0].natIP)"

